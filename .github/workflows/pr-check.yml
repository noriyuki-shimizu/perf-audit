name: PR Check

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
      - develop
      - 'feature/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.19.0'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript type check
        id: typecheck
        run: npm run typecheck
        continue-on-error: true

      - name: Run ESLint
        id: lint
        run: npm run lint
        continue-on-error: true

      - name: Run format check
        id: format
        run: npm run format:check
        continue-on-error: true

      - name: Build project
        id: build
        run: npm run build
        continue-on-error: true

      - name: Run tests
        id: test
        run: npm test -- --run --reporter=verbose
        continue-on-error: true

      - name: Post PR comment with results
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const checks = [
              { name: '📝 TypeScript', step: '${{ steps.typecheck.outcome }}' },
              { name: '🔍 ESLint', step: '${{ steps.lint.outcome }}' },
              { name: '💅 Format', step: '${{ steps.format.outcome }}' },
              { name: '🏗️ Build', step: '${{ steps.build.outcome }}' },
              { name: '🧪 Tests', step: '${{ steps.test.outcome }}' }
            ];

            const failedChecks = checks.filter(check => check.step === 'failure');
            const allPassed = failedChecks.length === 0;

            let body = '## 🤖 PR Check Results\n\n';

            if (allPassed) {
              body += '✅ **All checks passed!**\n\n';
            } else {
              body += '❌ **Some checks failed**\n\n';
            }

            body += '| Check | Status |\n|-------|--------|\n';
            checks.forEach(check => {
              const icon = check.step === 'success' ? '✅' : '❌';
              body += `| ${check.name} | ${icon} |\n`;
            });

            if (!allPassed) {
              body += '\n### 📋 Next Steps\n\n';
              if (failedChecks.some(c => c.name.includes('TypeScript'))) {
                body += '- Fix TypeScript errors: `npm run typecheck`\n';
              }
              if (failedChecks.some(c => c.name.includes('ESLint'))) {
                body += '- Fix linting errors: `npm run lint:fix`\n';
              }
              if (failedChecks.some(c => c.name.includes('Format'))) {
                body += '- Format code: `npm run format`\n';
              }
              if (failedChecks.some(c => c.name.includes('Build'))) {
                body += '- Fix build errors: `npm run build`\n';
              }
              if (failedChecks.some(c => c.name.includes('Tests'))) {
                body += '- Fix failing tests: `npm test`\n';
              }
            }

            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('PR Check Results')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body
              });
            }

      - name: Check overall status
        if: always()
        run: |
          if [[ "${{ steps.typecheck.outcome }}" == "failure" ]] || \
             [[ "${{ steps.lint.outcome }}" == "failure" ]] || \
             [[ "${{ steps.format.outcome }}" == "failure" ]] || \
             [[ "${{ steps.build.outcome }}" == "failure" ]] || \
             [[ "${{ steps.test.outcome }}" == "failure" ]]; then
            echo "❌ One or more checks failed"
            exit 1
          fi
          echo "✅ All checks passed"

  performance-check:
    name: Performance Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event.pull_request.draft == false

    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.19.0'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Analyze bundle size
        id: bundle-analyze
        run: |
          node dist/bin/cli.js analyze --format json > bundle-report.json || true
          if [ -f bundle-report.json ]; then
            echo "bundle_size=$(cat bundle-report.json | jq -r '.bundles | map(.size) | add')" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

      - name: Checkout base branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.base.sha }}
          path: base

      - name: Analyze base branch bundle
        id: base-bundle
        run: |
          cd base
          npm ci
          npm run build
          node dist/bin/cli.js analyze --format json > ../base-bundle-report.json || true
          cd ..
          if [ -f base-bundle-report.json ]; then
            echo "base_size=$(cat base-bundle-report.json | jq -r '.bundles | map(.size) | add')" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

      - name: Post bundle size comparison
        if: steps.bundle-analyze.outcome == 'success' && steps.base-bundle.outcome == 'success'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prSize = ${{ steps.bundle-analyze.outputs.bundle_size || 0 }};
            const baseSize = ${{ steps.base-bundle.outputs.base_size || 0 }};
            const diff = prSize - baseSize;
            const percentChange = baseSize > 0 ? ((diff / baseSize) * 100).toFixed(2) : 0;

            let emoji = '📦';
            if (diff > 0) emoji = '📈';
            else if (diff < 0) emoji = '📉';

            const formatSize = (bytes) => {
              const kb = bytes / 1024;
              return kb.toFixed(2) + ' KB';
            };

            let body = `## ${emoji} Bundle Size Report\n\n`;
            body += `| Metric | Base | PR | Diff | % |\n`;
            body += `|--------|------|-----|------|---|\n`;
            body += `| Total Bundle | ${formatSize(baseSize)} | ${formatSize(prSize)} | ${diff > 0 ? '+' : ''}${formatSize(diff)} | ${diff > 0 ? '+' : ''}${percentChange}% |\n`;

            if (Math.abs(percentChange) > 10) {
              body += `\n⚠️ **Warning:** Significant bundle size change detected!\n`;
            }

            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('Bundle Size Report')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body
              });
            }
